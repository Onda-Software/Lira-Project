import tensorflow as tf
import numpy as np

class TextCompletionModel():

    def __init__(self, dataset) -> None:
    
        self.dataset = dataset


    def load_model(path):
    
        return tf.keras.models.load_model(path)

    def mount_tokens(self):

        # Tokenização do texto
        tokenizer = tf.keras.preprocessing.text.Tokenizer()
        input_sequences = []
        total_words = ""

        for data in self.dataset:

            text = data['text']
            tokenizer.fit_on_texts([text])

            total_words = len(tokenizer.word_index) + 1

            # Sequências de treinamento

            for i in range(1, len(text.split())):

                n_gram_sequence = text.split()[:i+1]
                input_sequences.append(n_gram_sequence)


        # Preparação de dados de entrada e saída
        max_sequence_length = max([len(seq) for seq in input_sequences])
        sequences = tokenizer.texts_to_sequences(input_sequences)
        sequences = np.array(tf.keras.preprocessing.sequence.pad_sequences(sequences, maxlen=max_sequence_length, padding='pre'))
        x, y = sequences[:, :-1], sequences[:, -1]

        # Conversão de y em matriz one-hot
        y = tf.keras.utils.to_categorical(y, num_classes=total_words)
        
        # Verificações
        print("=================================================================")
        print(f"Total unique words: ({total_words})")
        print(f"Dimensions of x: ({x.shape})")
        print(f"Dimensions of y: ({y.shape})")
        print("=================================================================")

        return x, y, tokenizer, max_sequence_length    
 
        
    def build_model(self):
    
        x, y, tokenizer, max_sequence_length = TextCompletionModel.mount_tokens(self)
        total_words = len(tokenizer.word_index)

        # Construção do modelo
        model = tf.keras.models.Sequential()
        model.add(tf.keras.layers.Embedding(total_words, 100, input_length=max_sequence_length - 1))
        model.add(tf.keras.layers.LSTM(100))
        model.add(tf.keras.layers.Dense(total_words, activation='softmax'))

        # Compilação do modelo
        model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

        # Treinamento do modelo
        model.fit(x, y, epochs=50000)
        model.summary()

        model.save("./models/sequential.keras")
        

    def predict_text(self, seed_text, next_words, model):
        
        x, y, tokenizer, max_sequence_length = TextCompletionModel.mount_tokens(self)
        print(x, y, tokenizer, max_sequence_length)
        for _ in range(next_words):
        
            token_list = tokenizer.texts_to_sequences([seed_text])[0]
            token_list = tf.keras.preprocessing.sequence.pad_sequences([token_list], maxlen=max_sequence_length-1, padding='pre')
            predicted_probabilities = model.predict(token_list)[0]
        
            # Escolher a próxima palavra com base na probabilidade
            predicted_index = np.argmax(predicted_probabilities)
            output_word = ""
        
            for word, index in tokenizer.word_index.items():
                
                if index == predicted_index:
                    output_word = word
                    break
            
                seed_text += " " + output_word
        
        return seed_text

