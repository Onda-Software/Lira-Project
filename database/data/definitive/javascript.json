[
    {"id": 1, "text": "Pergunta: Qual é a diferença entre var, let e const? Resposta: var tem escopo de função, let e const têm escopo de bloco. const define uma constante."},
    {"id": 2, "text": "Pergunta: O que é um closure? Resposta: Closure é uma função que mantém referência ao seu escopo léxico, mesmo após a execução."},
    {"id": 3, "text": "Pergunta: O que é um callback? Resposta: Callback é uma função passada como argumento para outra função, que será executada após a conclusão de uma operação."},
    {"id": 4, "text": "Pergunta: O que é o DOM? Resposta: DOM (Document Object Model) é uma interface de programação para documentos HTML e XML."},
    {"id": 5, "text": "Pergunta: Como declarar uma função em JavaScript? Resposta: Uma função pode ser declarada usando a sintaxe function nome() {} ou como uma arrow function () => {}."},
    {"id": 6, "text": "Pergunta: O que é JSON? Resposta: JSON (JavaScript Object Notation) é um formato de troca de dados leve e fácil de ler e escrever."},
    {"id": 7, "text": "Pergunta: O que é AJAX? Resposta: AJAX (Asynchronous JavaScript and XML) permite a atualização de partes da página web sem recarregar toda a página."},
    {"id": 8, "text": "Pergunta: O que são Promises? Resposta: Promises são objetos usados para operações assíncronas, representando eventual conclusão ou falha da operação."},
    {"id": 9, "text": "Pergunta: O que é o ES6? Resposta: ES6 (ECMAScript 2015) é a sexta versão da especificação ECMAScript que introduziu várias funcionalidades novas no JavaScript."},
    {"id": 10, "text": "Pergunta: O que é uma arrow function? Resposta: Arrow functions são uma forma concisa de escrever funções em JavaScript introduzida no ES6."},
    {"id": 11, "text": "Pergunta: O que é o this em JavaScript? Resposta: this refere-se ao contexto de execução atual e pode variar dependendo de como uma função é chamada."},
    {"id": 12, "text": "Pergunta: O que são eventos em JavaScript? Resposta: Eventos são ações ou ocorrências que podem ser detectadas e respondidas pelo JavaScript."},
    {"id": 13, "text": "Pergunta: O que é o Node.js? Resposta: Node.js é um ambiente de execução JavaScript do lado do servidor."},
    {"id": 14, "text": "Pergunta: O que é NPM? Resposta: NPM (Node Package Manager) é um gerenciador de pacotes para Node.js."},
    {"id": 15, "text": "Pergunta: O que é um módulo em JavaScript? Resposta: Módulos são unidades de código que podem ser importadas e exportadas entre arquivos JavaScript."},
    {"id": 16, "text": "Pergunta: O que é o TypeScript? Resposta: TypeScript é uma linguagem que estende o JavaScript adicionando tipagem estática."},
    {"id": 17, "text": "Pergunta: O que é o React? Resposta: React é uma biblioteca JavaScript para construção de interfaces de usuário."},
    {"id": 18, "text": "Pergunta: O que é o Angular? Resposta: Angular é um framework para construção de aplicações web de página única."},
    {"id": 19, "text": "Pergunta: O que é o Vue.js? Resposta: Vue.js é um framework progressivo para construção de interfaces de usuário."},
    {"id": 20, "text": "Pergunta: O que é o jQuery? Resposta: jQuery é uma biblioteca JavaScript que simplifica o manuseio de eventos, animações e manipulação de DOM."},
    {"id": 21, "text": "Pergunta: O que é o ECMAScript? Resposta: ECMAScript é uma especificação de linguagem de script padronizada pela ECMA International."},
    {"id": 22, "text": "Pergunta: O que são operadores ternários? Resposta: Operadores ternários são uma forma concisa de escrita de uma expressão condicional (condição ? valor1 : valor2)."},
    {"id": 23, "text": "Pergunta: O que é o JSON.stringify? Resposta: JSON.stringify é um método que converte um objeto JavaScript em uma string JSON."},
    {"id": 24, "text": "Pergunta: O que é o JSON.parse? Resposta: JSON.parse é um método que converte uma string JSON em um objeto JavaScript."},
    {"id": 25, "text": "Pergunta: O que é o localStorage? Resposta: localStorage é uma API do navegador que permite armazenar dados localmente sem data de expiração."},
    {"id": 26, "text": "Pergunta: O que é o sessionStorage? Resposta: sessionStorage é uma API do navegador que permite armazenar dados para a duração da sessão da página."},
    {"id": 27, "text": "Pergunta: O que é o Event Loop? Resposta: Event Loop é um mecanismo que permite o JavaScript realizar operações assíncronas."},
    {"id": 28, "text": "Pergunta: O que é o Hoisting? Resposta: Hoisting é o comportamento do JavaScript de mover declarações para o topo do escopo."},
    {"id": 29, "text": "Pergunta: O que é o Strict Mode? Resposta: Strict Mode é uma funcionalidade que permite um modo de execução mais restrito e seguro do JavaScript."},
    {"id": 30, "text": "Pergunta: O que é JavaScript? Resposta: JavaScript é uma linguagem de programação usada principalmente para desenvolvimento web."},
    {"id": 31, "text": "Pergunta: Qual é a diferença entre var, let e const? Resposta: var tem escopo de função, let e const têm escopo de bloco. const define uma constante."},
    {"id": 32, "text": "Pergunta: O que é um closure? Resposta: Closure é uma função que mantém referência ao seu escopo léxico, mesmo após a execução."},
    {"id": 33, "text": "Pergunta: O que é um callback? Resposta: Callback é uma função passada como argumento para outra função, que será executada após a conclusão de uma operação."},
    {"id": 34, "text": "Pergunta: O que é o DOM? Resposta: DOM (Document Object Model) é uma interface de programação para documentos HTML e XML."},
    {"id": 35, "text": "Pergunta: Como declarar uma função em JavaScript? Resposta: Uma função pode ser declarada usando a sintaxe function nome() {} ou como uma arrow function () => {}."},
    {"id": 36, "text": "Pergunta: O que é JSON? Resposta: JSON (JavaScript Object Notation) é um formato de troca de dados leve e fácil de ler e escrever."},
    {"id": 37, "text": "Pergunta: O que é AJAX? Resposta: AJAX (Asynchronous JavaScript and XML) permite a atualização de partes da página web sem recarregar toda a página."},
    {"id": 38, "text": "Pergunta: O que são Promises? Resposta: Promises são objetos usados para operações assíncronas, representando eventual conclusão ou falha da operação."},
    {"id": 39, "text": "Pergunta: O que é o ES6? Resposta: ES6 (ECMAScript 2015) é a sexta versão da especificação ECMAScript que introduziu várias funcionalidades novas no JavaScript."},
    {"id": 40, "text": "Pergunta: O que é uma arrow function? Resposta: Arrow functions são uma forma concisa de escrever funções em JavaScript introduzida no ES6."},
    {"id": 41, "text": "Pergunta: O que é o this em JavaScript? Resposta: this refere-se ao contexto de execução atual e pode variar dependendo de como uma função é chamada."},
    {"id": 42, "text": "Pergunta: O que são eventos em JavaScript? Resposta: Eventos são ações ou ocorrências que podem ser detectadas e respondidas pelo JavaScript."},
    {"id": 43, "text": "Pergunta: O que é o Node.js? Resposta: Node.js é um ambiente de execução JavaScript do lado do servidor."},
    {"id": 44, "text": "Pergunta: O que é NPM? Resposta: NPM (Node Package Manager) é um gerenciador de pacotes para Node.js."},
    {"id": 45, "text": "Pergunta: O que é um módulo em JavaScript? Resposta: Módulos são unidades de código que podem ser importadas e exportadas entre arquivos JavaScript."},
    {"id": 46, "text": "Pergunta: O que é o TypeScript? Resposta: TypeScript é uma linguagem que estende o JavaScript adicionando tipagem estática."},
    {"id": 47, "text": "Pergunta: O que é o React? Resposta: React é uma biblioteca JavaScript para construção de interfaces de usuário."},
    {"id": 48, "text": "Pergunta: O que é o Angular? Resposta: Angular é um framework para construção de aplicações web de página única."},
    {"id": 49, "text": "Pergunta: O que é o Vue.js? Resposta: Vue.js é um framework progressivo para construção de interfaces de usuário."},
    {"id": 50, "text": "Pergunta: O que é o jQuery? Resposta: jQuery é uma biblioteca JavaScript que simplifica o manuseio de eventos, animações e manipulação de DOM."},
    {"id": 51, "text": "Pergunta: O que é o ECMAScript? Resposta: ECMAScript é uma especificação de linguagem de script padronizada pela ECMA International."},
    {"id": 52, "text": "Pergunta: O que são operadores ternários? Resposta: Operadores ternários são uma forma concisa de escrita de uma expressão condicional (condição ? valor1 : valor2)."},
    {"id": 53, "text": "Pergunta: O que é o JSON.stringify? Resposta: JSON.stringify é um método que converte um objeto JavaScript em uma string JSON."},
    {"id": 54, "text": "Pergunta: O que é o JSON.parse? Resposta: JSON.parse é um método que converte uma string JSON em um objeto JavaScript."},
    {"id": 55, "text": "Pergunta: O que é o localStorage? Resposta: localStorage é uma API do navegador que permite armazenar dados localmente sem data de expiração."},
    {"id": 56, "text": "Pergunta: O que é o sessionStorage? Resposta: sessionStorage é uma API do navegador que permite armazenar dados para a duração da sessão da página."},
    {"id": 57, "text": "Pergunta: O que é o Event Loop? Resposta: Event Loop é um mecanismo que permite o JavaScript realizar operações assíncronas."},
    {"id": 58, "text": "Pergunta: O que é o Hoisting? Resposta: Hoisting é o comportamento do JavaScript de mover declarações para o topo do escopo."},
    {"id": 59, "text": "Pergunta: O que é o Strict Mode? Resposta: Strict Mode é uma funcionalidade que permite um modo de execução mais restrito e seguro do JavaScript."},
    {"id": 60, "text": "Pergunta: O que é JavaScript? Resposta: JavaScript é uma linguagem de programação usada principalmente para desenvolvimento web."},
    {"id": 61, "text": "Pergunta: Qual é a diferença entre var, let e const? Resposta: var tem escopo de função, let e const têm escopo de bloco. const define uma constante."},
    {"id": 62, "text": "Pergunta: O que é um closure? Resposta: Closure é uma função que mantém referência ao seu escopo léxico, mesmo após a execução."},
    {"id": 63, "text": "Pergunta: O que é um callback? Resposta: Callback é uma função passada como argumento para outra função, que será executada após a conclusão de uma operação."},
    {"id": 64, "text": "Pergunta: O que é o DOM? Resposta: DOM (Document Object Model) é uma interface de programação para documentos HTML e XML."},
    {"id": 65, "text": "Pergunta: Como declarar uma função em JavaScript? Resposta: Uma função pode ser declarada usando a sintaxe function nome() {} ou como uma arrow function () => {}."},
    {"id": 66, "text": "Pergunta: O que é JSON? Resposta: JSON (JavaScript Object Notation) é um formato de troca de dados leve e fácil de ler e escrever."},
    {"id": 67, "text": "Pergunta: O que é AJAX? Resposta: AJAX (Asynchronous JavaScript and XML) permite a atualização de partes da página web sem recarregar toda a página."},
    {"id": 68, "text": "Pergunta: O que são Promises? Resposta: Promises são objetos usados para operações assíncronas, representando eventual conclusão ou falha da operação."},
    {"id": 69, "text": "Pergunta: O que é o ES6? Resposta: ES6 (ECMAScript 2015) é a sexta versão da especificação ECMAScript que introduziu várias funcionalidades novas no JavaScript."},
    {"id": 70, "text": "Pergunta: O que é uma arrow function? Resposta: Arrow functions são uma forma concisa de escrever funções em JavaScript introduzida no ES6."},
    {"id": 71, "text": "Pergunta: O que é o this em JavaScript? Resposta: this refere-se ao contexto de execução atual e pode variar dependendo de como uma função é chamada."},
    {"id": 72, "text": "Pergunta: O que são eventos em JavaScript? Resposta: Eventos são ações ou ocorrências que podem ser detectadas e respondidas pelo JavaScript."},
    {"id": 73, "text": "Pergunta: O que é o Node.js? Resposta: Node.js é um ambiente de execução JavaScript do lado do servidor."},
    {"id": 74, "text": "Pergunta: O que é NPM? Resposta: NPM (Node Package Manager) é um gerenciador de pacotes para Node.js."},
    {"id": 75, "text": "Pergunta: O que é um módulo em JavaScript? Resposta: Módulos são unidades de código que podem ser importadas e exportadas entre arquivos JavaScript."},
    {"id": 76, "text": "Pergunta: O que é o TypeScript? Resposta: TypeScript é uma linguagem que estende o JavaScript adicionando tipagem estática."},
    {"id": 77, "text": "Pergunta: O que é o React? Resposta: React é uma biblioteca JavaScript para construção de interfaces de usuário."},
    {"id": 78, "text": "Pergunta: O que é o Angular? Resposta: Angular é um framework para construção de aplicações web de página única."},
    {"id": 79, "text": "Pergunta: O que é o Vue.js? Resposta: Vue.js é um framework progressivo para construção de interfaces de usuário."},
    {"id": 80, "text": "Pergunta: O que é o jQuery? Resposta: jQuery é uma biblioteca JavaScript que simplifica o manuseio de eventos, animações e manipulação de DOM."},
    {"id": 81, "text": "Pergunta: O que é o ECMAScript? Resposta: ECMAScript é uma especificação de linguagem de script padronizada pela ECMA International."},
    {"id": 82, "text": "Pergunta: O que são operadores ternários? Resposta: Operadores ternários são uma forma concisa de escrita de uma expressão condicional (condição ? valor1 : valor2)."},
    {"id": 83, "text": "Pergunta: O que é o JSON.stringify? Resposta: JSON.stringify é um método que converte um objeto JavaScript em uma string JSON."},
    {"id": 84, "text": "Pergunta: O que é o JSON.parse? Resposta: JSON.parse é um método que converte uma string JSON em um objeto JavaScript."},
    {"id": 85, "text": "Pergunta: O que é o localStorage? Resposta: localStorage é uma API do navegador que permite armazenar dados localmente sem data de expiração."},
    {"id": 86, "text": "Pergunta: O que é o sessionStorage? Resposta: sessionStorage é uma API do navegador que permite armazenar dados para a duração da sessão da página."},
    {"id": 87, "text": "Pergunta: O que é o Event Loop? Resposta: Event Loop é um mecanismo que permite o JavaScript realizar operações assíncronas."},
    {"id": 88, "text": "Pergunta: O que é o Hoisting? Resposta: Hoisting é o comportamento do JavaScript de mover declarações para o topo do escopo."},
    {"id": 89, "text": "Pergunta: O que é o Strict Mode? Resposta: Strict Mode é uma funcionalidade que permite um modo de execução mais restrito e seguro do JavaScript."},
    {"id": 90, "text": "Pergunta: O que é JavaScript? Resposta: JavaScript é uma linguagem de programação usada principalmente para desenvolvimento web."},
    {"id": 91, "text": "Pergunta: Qual é a diferença entre var, let e const? Resposta: var tem escopo de função, let e const têm escopo de bloco. const define uma constante."},
    {"id": 92, "text": "Pergunta: O que é um closure? Resposta: Closure é uma função que mantém referência ao seu escopo léxico, mesmo após a execução."},
    {"id": 93, "text": "Pergunta: O que é um callback? Resposta: Callback é uma função passada como argumento para outra função, que será executada após a conclusão de uma operação."},
    {"id": 94, "text": "Pergunta: O que é o DOM? Resposta: DOM (Document Object Model) é uma interface de programação para documentos HTML e XML."},
    {"id": 95, "text": "Pergunta: Como declarar uma função em JavaScript? Resposta: Uma função pode ser declarada usando a sintaxe function nome() {} ou como uma arrow function () => {}."},
    {"id": 96, "text": "Pergunta: O que é JSON? Resposta: JSON (JavaScript Object Notation) é um formato de troca de dados leve e fácil de ler e escrever."},
    {"id": 97, "text": "Pergunta: O que é AJAX? Resposta: AJAX (Asynchronous JavaScript and XML) permite a atualização de partes da página web sem recarregar toda a página."},
    {"id": 98, "text": "Pergunta: O que são Promises? Resposta: Promises são objetos usados para operações assíncronas, representando eventual conclusão ou falha da operação."},
    {"id": 99, "text": "Pergunta: O que é o ES6? Resposta: ES6 (ECMAScript 2015) é a sexta versão da especificação ECMAScript que introduziu várias funcionalidades novas no JavaScript."},
    {"id": 100, "text": "Pergunta: O que é uma arrow function? Resposta: Arrow functions são uma forma concisa de escrever funções em JavaScript introduzida no ES6."},
    {"id": 101, "text": "Pergunta: O que é o this em JavaScript? Resposta: this refere-se ao contexto de execução atual e pode variar dependendo de como uma função é chamada."},
    {"id": 102, "text": "Pergunta: O que são eventos em JavaScript? Resposta: Eventos são ações ou ocorrências que podem ser detectadas e respondidas pelo JavaScript."},
    {"id": 103, "text": "Pergunta: O que é o Node.js? Resposta: Node.js é um ambiente de execução JavaScript do lado do servidor."},
    {"id": 104, "text": "Pergunta: O que é NPM? Resposta: NPM (Node Package Manager) é um gerenciador de pacotes para Node.js."},
    {"id": 105, "text": "Pergunta: O que é um módulo em JavaScript? Resposta: Módulos são unidades de código que podem ser importadas e exportadas entre arquivos JavaScript."},
    {"id": 106, "text": "Pergunta: O que é o TypeScript? Resposta: TypeScript é uma linguagem que estende o JavaScript adicionando tipagem estática."},
    {"id": 107, "text": "Pergunta: O que é o React? Resposta: React é uma biblioteca JavaScript para construção de interfaces de usuário."},
    {"id": 108, "text": "Pergunta: O que é o Angular? Resposta: Angular é um framework para construção de aplicações web de página única."},
    {"id": 109, "text": "Pergunta: O que é o Vue.js? Resposta: Vue.js é um framework progressivo para construção de interfaces de usuário."},
    {"id": 110, "text": "Pergunta: O que é o jQuery? Resposta: jQuery é uma biblioteca JavaScript que simplifica o manuseio de eventos, animações e manipulação de DOM."},
    {"id": 111, "text": "Pergunta: O que é o ECMAScript? Resposta: ECMAScript é uma especificação de linguagem de script padronizada pela ECMA International."},
    {"id": 112, "text": "Pergunta: O que são operadores ternários? Resposta: Operadores ternários são uma forma concisa de escrita de uma expressão condicional (condição ? valor1 : valor2)."},
    {"id": 113, "text": "Pergunta: O que é o JSON.stringify? Resposta: JSON.stringify é um método que converte um objeto JavaScript em uma string JSON."},
    {"id": 114, "text": "Pergunta: O que é o JSON.parse? Resposta: JSON.parse é um método que converte uma string JSON em um objeto JavaScript."},
    {"id": 115, "text": "Pergunta: O que é o localStorage? Resposta: localStorage é uma API do navegador que permite armazenar dados localmente sem data de expiração."},
    {"id": 116, "text": "Pergunta: O que é o sessionStorage? Resposta: sessionStorage é uma API do navegador que permite armazenar dados para a duração da sessão da página."},
    {"id": 117, "text": "Pergunta: O que é o Event Loop? Resposta: Event Loop é um mecanismo que permite o JavaScript realizar operações assíncronas."},
    {"id": 118, "text": "Pergunta: O que é o Hoisting? Resposta: Hoisting é o comportamento do JavaScript de mover declarações para o topo do escopo."},
    {"id": 119, "text": "Pergunta: O que é o Strict Mode? Resposta: Strict Mode é uma funcionalidade que permite um modo de execução mais restrito e seguro do JavaScript."},
    {"id": 120, "text": "Pergunta: O que é JavaScript? Resposta: JavaScript é uma linguagem de programação usada principalmente para desenvolvimento web."},
    {"id": 121, "text": "Pergunta: Qual é a diferença entre var, let e const? Resposta: var tem escopo de função, let e const têm escopo de bloco. const define uma constante."},
    {"id": 122, "text": "Pergunta: O que é um closure? Resposta: Closure é uma função que mantém referência ao seu escopo léxico, mesmo após a execução."},
    {"id": 123, "text": "Pergunta: O que é um callback? Resposta: Callback é uma função passada como argumento para outra função, que será executada após a conclusão de uma operação."},
    {"id": 124, "text": "Pergunta: O que é o DOM? Resposta: DOM (Document Object Model) é uma interface de programação para documentos HTML e XML."},
    {"id": 125, "text": "Pergunta: Como declarar uma função em JavaScript? Resposta: Uma função pode ser declarada usando a sintaxe function nome() {} ou como uma arrow function () => {}."},
    {"id": 126, "text": "Pergunta: O que é JSON? Resposta: JSON (JavaScript Object Notation) é um formato de troca de dados leve e fácil de ler e escrever."},
    {"id": 127, "text": "Pergunta: O que é AJAX? Resposta: AJAX (Asynchronous JavaScript and XML) permite a atualização de partes da página web sem recarregar toda a página."},
    {"id": 128, "text": "Pergunta: O que são Promises? Resposta: Promises são objetos usados para operações assíncronas, representando eventual conclusão ou falha da operação."},
    {"id": 129, "text": "Pergunta: O que é o ES6? Resposta: ES6 (ECMAScript 2015) é a sexta versão da especificação ECMAScript que introduziu várias funcionalidades novas no JavaScript."},
    {"id": 130, "text": "Pergunta: O que é uma arrow function? Resposta: Arrow functions são uma forma concisa de escrever funções em JavaScript introduzida no ES6."},
    {"id": 131, "text": "Pergunta: O que é o this em JavaScript? Resposta: this refere-se ao contexto de execução atual e pode variar dependendo de como uma função é chamada."},
    {"id": 132, "text": "Pergunta: O que são eventos em JavaScript? Resposta: Eventos são ações ou ocorrências que podem ser detectadas e respondidas pelo JavaScript."},
    {"id": 133, "text": "Pergunta: O que é o Node.js? Resposta: Node.js é um ambiente de execução JavaScript do lado do servidor."},
    {"id": 134, "text": "Pergunta: O que é NPM? Resposta: NPM (Node Package Manager) é um gerenciador de pacotes para Node.js."},
    {"id": 135, "text": "Pergunta: O que é um módulo em JavaScript? Resposta: Módulos são unidades de código que podem ser importadas e exportadas entre arquivos JavaScript."},
    {"id": 136, "text": "Pergunta: O que é o TypeScript? Resposta: TypeScript é uma linguagem que estende o JavaScript adicionando tipagem estática."},
    {"id": 137, "text": "Pergunta: O que é o React? Resposta: React é uma biblioteca JavaScript para construção de interfaces de usuário."},
    {"id": 138, "text": "Pergunta: O que é o Angular? Resposta: Angular é um framework para construção de aplicações web de página única."},
    {"id": 139, "text": "Pergunta: O que é o Vue.js? Resposta: Vue.js é um framework progressivo para construção de interfaces de usuário."},
    {"id": 140, "text": "Pergunta: O que é o jQuery? Resposta: jQuery é uma biblioteca JavaScript que simplifica o manuseio de eventos, animações e manipulação de DOM."},
    {"id": 141, "text": "Pergunta: O que é o ECMAScript? Resposta: ECMAScript é uma especificação de linguagem de script padronizada pela ECMA International."},
    {"id": 142, "text": "Pergunta: O que são operadores ternários? Resposta: Operadores ternários são uma forma concisa de escrita de uma expressão condicional (condição ? valor1 : valor2)."},
    {"id": 143, "text": "Pergunta: O que é o JSON.stringify? Resposta: JSON.stringify é um método que converte um objeto JavaScript em uma string JSON."},
    {"id": 144, "text": "Pergunta: O que é o JSON.parse? Resposta: JSON.parse é um método que converte uma string JSON em um objeto JavaScript."},
    {"id": 145, "text": "Pergunta: O que é o localStorage? Resposta: localStorage é uma API do navegador que permite armazenar dados localmente sem data de expiração."},
    {"id": 146, "text": "Pergunta: O que é o sessionStorage? Resposta: sessionStorage é uma API do navegador que permite armazenar dados para a duração da sessão da página."},
    {"id": 147, "text": "Pergunta: O que é o Event Loop? Resposta: Event Loop é um mecanismo que permite o JavaScript realizar operações assíncronas."},
    {"id": 148, "text": "Pergunta: O que é o Hoisting? Resposta: Hoisting é o comportamento do JavaScript de mover declarações para o topo do escopo."},
    {"id": 149, "text": "Pergunta: O que é o Strict Mode? Resposta: Strict Mode é uma funcionalidade que permite um modo de execução mais restrito e seguro do JavaScript."},
    {"id": 150, "text": "Pergunta: O que é JavaScript? Resposta: JavaScript é uma linguagem de programação usada principalmente para desenvolvimento web."},
    {"id": 151, "text": "Pergunta: Qual é a diferença entre var, let e const? Resposta: var tem escopo de função, let e const têm escopo de bloco. const define uma constante."},
    {"id": 152, "text": "Pergunta: O que é um closure? Resposta: Closure é uma função que mantém referência ao seu escopo léxico, mesmo após a execução."},
    {"id": 153, "text": "Pergunta: O que é um callback? Resposta: Callback é uma função passada como argumento para outra função, que será executada após a conclusão de uma operação."},
    {"id": 154, "text": "Pergunta: O que é o DOM? Resposta: DOM (Document Object Model) é uma interface de programação para documentos HTML e XML."},
    {"id": 155, "text": "Pergunta: Como declarar uma função em JavaScript? Resposta: Uma função pode ser declarada usando a sintaxe function nome() {} ou como uma arrow function () => {}."},
    {"id": 156, "text": "Pergunta: O que é JSON? Resposta: JSON (JavaScript Object Notation) é um formato de troca de dados leve e fácil de ler e escrever."},
    {"id": 157, "text": "Pergunta: O que é AJAX? Resposta: AJAX (Asynchronous JavaScript and XML) permite a atualização de partes da página web sem recarregar toda a página."},
    {"id": 158, "text": "Pergunta: O que são Promises? Resposta: Promises são objetos usados para operações assíncronas, representando eventual conclusão ou falha da operação."},
    {"id": 159, "text": "Pergunta: O que é o ES6? Resposta: ES6 (ECMAScript 2015) é a sexta versão da especificação ECMAScript que introduziu várias funcionalidades novas no JavaScript."},
    {"id": 160, "text": "Pergunta: O que é uma arrow function? Resposta: Arrow functions são uma forma concisa de escrever funções em JavaScript introduzida no ES6."},
    {"id": 161, "text": "Pergunta: O que é o this em JavaScript? Resposta: this refere-se ao contexto de execução atual e pode variar dependendo de como uma função é chamada."},
    {"id": 162, "text": "Pergunta: O que são eventos em JavaScript? Resposta: Eventos são ações ou ocorrências que podem ser detectadas e respondidas pelo JavaScript."},
    {"id": 163, "text": "Pergunta: O que é o Node.js? Resposta: Node.js é um ambiente de execução JavaScript do lado do servidor."},
    {"id": 164, "text": "Pergunta: O que é NPM? Resposta: NPM (Node Package Manager) é um gerenciador de pacotes para Node.js."},
    {"id": 165, "text": "Pergunta: O que é um módulo em JavaScript? Resposta: Módulos são unidades de código que podem ser importadas e exportadas entre arquivos JavaScript."},
    {"id": 166, "text": "Pergunta: O que é o TypeScript? Resposta: TypeScript é uma linguagem que estende o JavaScript adicionando tipagem estática."},
    {"id": 167, "text": "Pergunta: O que é o React? Resposta: React é uma biblioteca JavaScript para construção de interfaces de usuário."},
    {"id": 168, "text": "Pergunta: O que é o Angular? Resposta: Angular é um framework para construção de aplicações web de página única."},
    {"id": 169, "text": "Pergunta: O que é o Vue.js? Resposta: Vue.js é um framework progressivo para construção de interfaces de usuário."},
    {"id": 170, "text": "Pergunta: O que é o jQuery? Resposta: jQuery é uma biblioteca JavaScript que simplifica o manuseio de eventos, animações e manipulação de DOM."},
    {"id": 171, "text": "Pergunta: O que é o ECMAScript? Resposta: ECMAScript é uma especificação de linguagem de script padronizada pela ECMA International."},
    {"id": 172, "text": "Pergunta: O que são operadores ternários? Resposta: Operadores ternários são uma forma concisa de escrita de uma expressão condicional (condição ? valor1 : valor2)."},
    {"id": 173, "text": "Pergunta: O que é o JSON.stringify? Resposta: JSON.stringify é um método que converte um objeto JavaScript em uma string JSON."},
    {"id": 174, "text": "Pergunta: O que é o JSON.parse? Resposta: JSON.parse é um método que converte uma string JSON em um objeto JavaScript."},
    {"id": 175, "text": "Pergunta: O que é o localStorage? Resposta: localStorage é uma API do navegador que permite armazenar dados localmente sem data de expiração."},
    {"id": 176, "text": "Pergunta: O que é o sessionStorage? Resposta: sessionStorage é uma API do navegador que permite armazenar dados para a duração da sessão da página."},
    {"id": 177, "text": "Pergunta: O que é o Event Loop? Resposta: Event Loop é um mecanismo que permite o JavaScript realizar operações assíncronas."},
    {"id": 178, "text": "Pergunta: O que é o Hoisting? Resposta: Hoisting é o comportamento do JavaScript de mover declarações para o topo do escopo."},
    {"id": 179, "text": "Pergunta: O que é o Strict Mode? Resposta: Strict Mode é uma funcionalidade que permite um modo de execução mais restrito e seguro do JavaScript."},
    {"id": 180, "text": "Pergunta: O que é uma promise em JavaScript? Resposta: Promise é um objeto que representa a eventual conclusão ou falha de uma operação assíncrona."},
    {"id": 181, "text": "Pergunta: O que é uma função anônima? Resposta: Função anônima é uma função sem nome que é geralmente atribuída a uma variável ou passada como argumento."},
    {"id": 182, "text": "Pergunta: O que é um operador spread? Resposta: Operador spread (...) permite expandir elementos de um array ou objeto."},
    {"id": 183, "text": "Pergunta: O que é o método map? Resposta: O método map() cria um novo array com os resultados da chamada de uma função para cada elemento do array."},
    {"id": 184, "text": "Pergunta: O que é o método filter? Resposta: O método filter() cria um novo array com todos os elementos que passaram no teste implementado pela função fornecida."},
    {"id": 185, "text": "Pergunta: O que é o método reduce? Resposta: O método reduce() aplica uma função a um acumulador e a cada valor do array (da esquerda para a direita) para reduzi-lo a um único valor."},
    {"id": 186, "text": "Pergunta: O que é o método forEach? Resposta: O método forEach() executa uma função fornecida uma vez para cada elemento do array."},
    {"id": 187, "text": "Pergunta: O que é o método find? Resposta: O método find() retorna o primeiro elemento no array que satisfaz a função de teste fornecida."},
    {"id": 188, "text": "Pergunta: O que é o método some? Resposta: O método some() testa se ao menos um dos elementos no array passa no teste implementado pela função fornecida."},
    {"id": 189, "text": "Pergunta: O que é o método every? Resposta: O método every() testa se todos os elementos no array passam no teste implementado pela função fornecida."},
    {"id": 190, "text": "Pergunta: O que é o método includes? Resposta: O método includes() determina se um array contém um determinado elemento, retornando true ou false conforme apropriado."},
    {"id": 191, "text": "Pergunta: O que é um evento onclick? Resposta: Onclick é um evento que ocorre quando um elemento HTML é clicado."},
    {"id": 192, "text": "Pergunta: O que é um listener de evento? Resposta: Listener de evento é uma função que espera por um evento específico em um elemento HTML."},
    {"id": 193, "text": "Pergunta: O que é o método addEventListener? Resposta: O método addEventListener() anexa um listener de evento a um elemento."},
    {"id": 194, "text": "Pergunta: O que é JSONP? Resposta: JSONP (JSON with Padding) é uma técnica usada para contornar restrições de CORS ao carregar dados JSON."},
    {"id": 195, "text": "Pergunta: O que é CORS? Resposta: CORS (Cross-Origin Resource Sharing) é um mecanismo que permite recursos restritos em uma página da web ser requisitados de outro domínio fora do domínio ao qual a página pertence."},
    {"id": 196, "text": "Pergunta: O que é um polyfill? Resposta: Polyfill é um pedaço de código usado para fornecer funcionalidades modernas em navegadores antigos que não as suportam nativamente."},
    {"id": 197, "text": "Pergunta: O que é a sintaxe async/await? Resposta: A sintaxe async/await é uma forma de lidar com operações assíncronas, permitindo escrever código assíncrono de forma mais síncrona."},
    {"id": 198, "text": "Pergunta: O que é uma função geradora? Resposta: Função geradora é uma função que pode ser pausada e retomada, e retorna um iterador."},
    {"id": 199, "text": "Pergunta: O que é o método fetch? Resposta: O método fetch() é usado para fazer requisições HTTP e processar as respostas de forma assíncrona."},
    {"id": 200, "text": "Pergunta: O que é a API de Geolocalização? Resposta: API de Geolocalização é uma interface que permite obter a localização geográfica do usuário."},
    {"id": 201, "text": "Pergunta: O que é a API de Web Storage? Resposta: API de Web Storage fornece mecanismos para armazenar dados no navegador do usuário."},
    {"id": 202, "text": "Pergunta: O que é a API de IndexedDB? Resposta: API de IndexedDB é um banco de dados de alto desempenho embutido no navegador, usado para armazenar grandes quantidades de dados."},
    {"id": 203, "text": "Pergunta: O que é o método querySelector? Resposta: O método querySelector() retorna o primeiro elemento que corresponde a um seletor CSS especificado."},
    {"id": 204, "text": "Pergunta: O que é o método querySelectorAll? Resposta: O método querySelectorAll() retorna todos os elementos que correspondem a um seletor CSS especificado."},
    {"id": 205, "text": "Pergunta: O que é o método getElementById? Resposta: O método getElementById() retorna o elemento que possui o atributo id especificado."},
    {"id": 206, "text": "Pergunta: O que é o método getElementsByClassName? Resposta: O método getElementsByClassName() retorna todos os elementos que possuem a classe CSS especificada."},
    {"id": 207, "text": "Pergunta: O que é o método getElementsByTagName? Resposta: O método getElementsByTagName() retorna todos os elementos com o nome da tag especificada."},
    {"id": 208, "text": "Pergunta: O que é o método createElement? Resposta: O método createElement() cria um novo elemento HTML com o nome da tag especificado."},
    {"id": 209, "text": "Pergunta: O que é o método appendChild? Resposta: O método appendChild() adiciona um nó como o último filho de um nó pai."},
    {"id": 210, "text": "Pergunta: O que é o método removeChild? Resposta: O método removeChild() remove um nó filho de um nó pai."},
    {"id": 211, "text": "Pergunta: O que é o método replaceChild? Resposta: O método replaceChild() substitui um nó filho por um novo nó."},
    {"id": 212, "text": "Pergunta: O que é o método cloneNode? Resposta: O método cloneNode() cria uma cópia de um nó."},
    {"id": 213, "text": "Pergunta: O que é o método setAttribute? Resposta: O método setAttribute() adiciona um novo atributo ou modifica o valor de um atributo existente em um elemento."},
    {"id": 214, "text": "Pergunta: O que é o método getAttribute? Resposta: O método getAttribute() retorna o valor do atributo especificado em um elemento."},
    {"id": 215, "text": "Pergunta: O que é o método removeAttribute? Resposta: O método removeAttribute() remove um atributo de um elemento."},
    {"id": 216, "text": "Pergunta: O que é o método classList? Resposta: classList é uma propriedade que retorna uma coleção DOMTokenList dos atributos de classe do elemento."},
    {"id": 217, "text": "Pergunta: O que é a propriedade innerHTML? Resposta: innerHTML é uma propriedade que define ou retorna o conteúdo HTML de um elemento."},
    {"id": 218, "text": "Pergunta: O que é a propriedade textContent? Resposta: textContent é uma propriedade que define ou retorna o conteúdo de texto de um nó e seus descendentes."},
    {"id": 219, "text": "Pergunta: O que é o método innerText? Resposta: innerText é uma propriedade que define ou retorna o conteúdo de texto visível de um nó e seus descendentes."},
    {"id": 220, "text": "Pergunta: O que é a propriedade value? Resposta: value é uma propriedade que define ou retorna o valor de um elemento de formulário, como input, select ou textarea."},
    {"id": 221, "text": "Pergunta: O que é a propriedade style? Resposta: style é uma propriedade que permite acessar e modificar os estilos CSS de um elemento."},
    {"id": 222, "text": "Pergunta: O que é a propriedade src? Resposta: src é uma propriedade que define ou retorna o caminho da URL de um elemento como img, script ou iframe."},
    {"id": 223, "text": "Pergunta: O que é a propriedade href? Resposta: href é uma propriedade que define ou retorna o URL de um link (ancora <a> ou base)."},
    {"id": 224, "text": "Pergunta: O que é a propriedade id? Resposta: id é uma propriedade que define ou retorna o valor do atributo id de um elemento."},
    {"id": 225, "text": "Pergunta: O que é a propriedade className? Resposta: className é uma propriedade que define ou retorna o valor do atributo class de um elemento."},
    {"id": 226, "text": "Pergunta: O que é o método addEventListener? Resposta: addEventListener é um método que adiciona um ouvinte de evento a um elemento."},
    {"id": 227, "text": "Pergunta: O que é o método removeEventListener? Resposta: removeEventListener é um método que remove um ouvinte de evento de um elemento."},
    {"id": 228, "text": "Pergunta: O que é o objeto event? Resposta: event é um objeto que representa um evento que ocorre no DOM."},
    {"id": 229, "text": "Pergunta: O que é a propriedade event.target? Resposta: event.target é uma propriedade que retorna o elemento que desencadeou o evento."},
    {"id": 230, "text": "Pergunta: O que é a propriedade event.currentTarget? Resposta: event.currentTarget é uma propriedade que retorna o elemento ao qual o ouvinte de evento está anexado."},
    {"id": 231, "text": "Pergunta: O que é a propriedade event.type? Resposta: event.type é uma propriedade que retorna o tipo de evento que foi disparado."},
    {"id": 232, "text": "Pergunta: O que é a propriedade event.preventDefault? Resposta: event.preventDefault é um método que cancela o evento se for cancelável, sem parar a propagação do mesmo."},
    {"id": 233, "text": "Pergunta: O que é a propriedade event.stopPropagation? Resposta: event.stopPropagation é um método que impede a propagação do evento na árvore DOM."},
    {"id": 234, "text": "Pergunta: O que é a propriedade event.stopImmediatePropagation? Resposta: event.stopImmediatePropagation é um método que impede a propagação do evento e evita que outros ouvintes de evento sejam chamados."},
    {"id": 235, "text": "Pergunta: O que é a propriedade event.bubbles? Resposta: event.bubbles é uma propriedade que indica se o evento se propaga para cima ou não."},
    {"id": 236, "text": "Pergunta: O que é a propriedade event.cancelable? Resposta: event.cancelable é uma propriedade que indica se o evento pode ser cancelado ou não."},
    {"id": 237, "text": "Pergunta: O que é a propriedade event.timeStamp? Resposta: event.timeStamp é uma propriedade que retorna o tempo em que o evento foi criado."},
    {"id": 238, "text": "Pergunta: O que é a API de Touch Events? Resposta: API de Touch Events é um conjunto de eventos que capturam interações de toque em dispositivos de tela sensível ao toque."},
    {"id": 239, "text": "Pergunta: O que é a API de Pointer Events? Resposta: API de Pointer Events é um conjunto de eventos que capturam interações de apontamento, como toque, caneta e mouse."},
    {"id": 240, "text": "Pergunta: O que é o evento load? Resposta: O evento load é disparado quando um recurso, como uma página ou uma imagem, é completamente carregado."},
    {"id": 241, "text": "Pergunta: O que é o evento unload? Resposta: O evento unload é disparado quando um documento ou uma página está sendo descarregado."},
    {"id": 242, "text": "Pergunta: O que é o evento resize? Resposta: O evento resize é disparado quando a janela do navegador é redimensionada."},
    {"id": 243, "text": "Pergunta: O que é o evento scroll? Resposta: O evento scroll é disparado quando um documento ou elemento é rolado."},
    {"id": 244, "text": "Pergunta: O que é o evento focus? Resposta: O evento focus é disparado quando um elemento ganha foco."},
    {"id": 245, "text": "Pergunta: O que é o evento blur? Resposta: O evento blur é disparado quando um elemento perde o foco."},
    {"id": 246, "text": "Pergunta: O que é o evento change? Resposta: O evento change é disparado quando o valor de um elemento é alterado."},
    {"id": 247, "text": "Pergunta: O que é o evento input? Resposta: O evento input é disparado quando o valor de um elemento de entrada é alterado."},
    {"id": 248, "text": "Pergunta: O que é o evento submit? Resposta: O evento submit é disparado quando um formulário é enviado."},
    {"id": 249, "text": "Pergunta: O que é o evento reset? Resposta: O evento reset é disparado quando um formulário é redefinido."},
    {"id": 250, "text": "Pergunta: O que é o evento keydown? Resposta: O evento keydown é disparado quando uma tecla é pressionada."},
    {"id": 251, "text": "Pergunta: O que é o evento keyup? Resposta: O evento keyup é disparado quando uma tecla é liberada."},
    {"id": 252, "text": "Pergunta: O que é o evento keypress? Resposta: O evento keypress é disparado quando uma tecla é pressionada e liberada."},
    {"id": 253, "text": "Pergunta: O que é o evento click? Resposta: O evento click é disparado quando um elemento é clicado."},
    {"id": 254, "text": "Pergunta: O que é o evento dblclick? Resposta: O evento dblclick é disparado quando um elemento é clicado duas vezes consecutivas."},
    {"id": 255, "text": "Pergunta: O que é o evento contextmenu? Resposta: O evento contextmenu é disparado quando o menu de contexto é solicitado."},
    {"id": 256, "text": "Pergunta: O que é o evento mouseenter? Resposta: O evento mouseenter é disparado quando o ponteiro do mouse entra em um elemento."},
    {"id": 257, "text": "Pergunta: O que é o evento mouseleave? Resposta: O evento mouseleave é disparado quando o ponteiro do mouse sai de um elemento."},
    {"id": 258, "text": "Pergunta: O que é o evento mousedown? Resposta: O evento mousedown é disparado quando um botão do mouse é pressionado sobre um elemento."},
    {"id": 259, "text": "Pergunta: O que é o evento mouseup? Resposta: O evento mouseup é disparado quando um botão do mouse é liberado sobre um elemento."},
    {"id": 260, "text": "Pergunta: O que é o evento mousemove? Resposta: O evento mousemove é disparado quando o ponteiro do mouse é movido sobre um elemento."},
    {"id": 261, "text": "Pergunta: O que é o evento mouseover? Resposta: O evento mouseover é disparado quando o ponteiro do mouse é movido sobre um elemento ou seus filhos."},
    {"id": 262, "text": "Pergunta: O que é o evento mouseout? Resposta: O evento mouseout é disparado quando o ponteiro do mouse é movido para fora de um elemento ou seus filhos."},
    {"id": 263, "text": "Pergunta: O que é o evento wheel? Resposta: O evento wheel é disparado quando a roda do mouse é rolada sobre um elemento."},
    {"id": 264, "text": "Pergunta: O que é o evento drag? Resposta: O evento drag é disparado quando um elemento é arrastado."},
    {"id": 265, "text": "Pergunta: O que é o evento dragstart? Resposta: O evento dragstart é disparado quando o arrastar de um elemento começa."},
    {"id": 266, "text": "Pergunta: O que é o evento dragend? Resposta: O evento dragend é disparado quando o arrastar de um elemento termina."},
    {"id": 267, "text": "Pergunta: O que é o evento dragenter? Resposta: O evento dragenter é disparado quando um elemento arrastado entra em um alvo de queda."},
    {"id": 268, "text": "Pergunta: O que é o evento dragleave? Resposta: O evento dragleave é disparado quando um elemento arrastado sai de um alvo de queda."},
    {"id": 269, "text": "Pergunta: O que é o evento dragover? Resposta: O evento dragover é disparado quando um elemento arrastado é movido sobre um alvo de queda."},
    {"id": 270, "text": "Pergunta: O que é o evento drop? Resposta: O evento drop é disparado quando um elemento arrastado é solto em um alvo de queda."},
    {"id": 271, "text": "Pergunta: O que é o evento touchstart? Resposta: O evento touchstart é disparado quando um ponto de contato é colocado na superfície de toque."},
    {"id": 272, "text": "Pergunta: O que é o evento touchend? Resposta: O evento touchend é disparado quando um ponto de contato é removido da superfície de toque."},
    {"id": 273, "text": "Pergunta: O que é o evento touchmove? Resposta: O evento touchmove é disparado quando um ponto de contato é movido ao longo da superfície de toque."},
    {"id": 274, "text": "Pergunta: O que é o evento touchcancel? Resposta: O evento touchcancel é disparado quando um ponto de contato é interrompido abruptamente."},
    {"id": 275, "text": "Pergunta: O que é o objeto navigator? Resposta: O objeto navigator contém informações sobre o agente de usuário, como o nome do navegador e o sistema operacional."},
    {"id": 276, "text": "Pergunta: O que é a propriedade navigator.userAgent? Resposta: navigator.userAgent é uma propriedade que retorna o cabeçalho user-agent enviado pelo navegador ao servidor."},
    {"id": 277, "text": "Pergunta: O que é a propriedade navigator.language? Resposta: navigator.language é uma propriedade que retorna o idioma preferido do navegador."},
    {"id": 278, "text": "Pergunta: O que é a propriedade navigator.onLine? Resposta: navigator.onLine é uma propriedade que retorna um valor booleano indicando se o navegador está online ou offline."},
    {"id": 279, "text": "Pergunta: O que é o objeto screen? Resposta: O objeto screen contém informações sobre a tela do usuário, como a resolução."},
    {"id": 280, "text": "Pergunta: O que é a propriedade screen.width? Resposta: screen.width é uma propriedade que retorna a largura da tela em pixels."},
    {"id": 281, "text": "Pergunta: O que é a propriedade screen.height? Resposta: screen.height é uma propriedade que retorna a altura da tela em pixels."},
    {"id": 282, "text": "Pergunta: O que é a propriedade screen.availWidth? Resposta: screen.availWidth é uma propriedade que retorna a largura da área disponível da tela em pixels."},
    {"id": 283, "text": "Pergunta: O que é a propriedade screen.availHeight? Resposta: screen.availHeight é uma propriedade que retorna a altura da área disponível da tela em pixels."},
    {"id": 284, "text": "Pergunta: O que é o objeto history? Resposta: O objeto history contém o histórico de navegação do navegador."},
    {"id": 285, "text": "Pergunta: O que é o método history.back? Resposta: history.back é um método que carrega a página anterior na sessão de histórico do navegador."},
    {"id": 286, "text": "Pergunta: O que é o método history.forward? Resposta: history.forward é um método que carrega a próxima página na sessão de histórico do navegador."},
    {"id": 287, "text": "Pergunta: O que é o método history.go? Resposta: history.go é um método que carrega uma página específica na sessão de histórico do navegador, baseada em sua posição relativa."},
    {"id": 288, "text": "Pergunta: O que é o objeto location? Resposta: O objeto location contém informações sobre o URL atual da janela do navegador."},
    {"id": 289, "text": "Pergunta: O que é a propriedade location.href? Resposta: location.href é uma propriedade que retorna o URL completo da página atual e permite redirecionar para uma nova URL."},
    {"id": 290, "text": "Pergunta: O que é o método location.assign? Resposta: location.assign é um método que carrega um novo documento em uma nova URL."},
    {"id": 291, "text": "Pergunta: O que é o método location.replace? Resposta: location.replace é um método que substitui o documento atual por um novo documento em uma nova URL sem salvar a página antiga no histórico."},
    {"id": 292, "text": "Pergunta: O que é o método location.reload? Resposta: location.reload é um método que recarrega a página atual."},
    {"id": 293, "text": "Pergunta: O que é a propriedade location.pathname? Resposta: location.pathname é uma propriedade que retorna o caminho e o nome do arquivo da URL atual."},
    {"id": 294, "text": "Pergunta: O que é a propriedade location.search? Resposta: location.search é uma propriedade que retorna a parte de consulta da URL, incluindo o ponto de interrogação."},
    {"id": 295, "text": "Pergunta: O que é a propriedade location.hash? Resposta: location.hash é uma propriedade que retorna a âncora de URL (o valor depois do símbolo #) da URL atual."},
    {"id": 296, "text": "Pergunta: O que é a propriedade location.hostname? Resposta: location.hostname é uma propriedade que retorna o nome do host da URL atual."},
    {"id": 297, "text": "Pergunta: O que é a propriedade location.protocol? Resposta: location.protocol é uma propriedade que retorna o protocolo da URL atual, incluindo os dois pontos finais."},
    {"id": 298, "text": "Pergunta: O que é a propriedade location.port? Resposta: location.port é uma propriedade que retorna o número da porta da URL atual."},
    {"id": 299, "text": "Pergunta: O que é o objeto console? Resposta: O objeto console fornece acesso ao console de depuração do navegador, como a consola JavaScript do Chrome."},
    {"id": 300, "text": "Pergunta: O que é o método console.log? Resposta: console.log é um método que exibe uma mensagem no console de depuração."},
    {"id": 301, "text": "Pergunta: O que é o método console.error? Resposta: console.error é um método que exibe uma mensagem de erro no console de depuração."},
    {"id": 302, "text": "Pergunta: O que é o método console.warn? Resposta: console.warn é um método que exibe uma mensagem de aviso no console de depuração."},
    {"id": 303, "text": "Pergunta: O que é o método console.info? Resposta: console.info é um método que exibe uma mensagem informativa no console de depuração."},
    {"id": 304, "text": "Pergunta: O que é o método console.debug? Resposta: console.debug é um método que exibe uma mensagem de depuração no console de depuração."},
    {"id": 305, "text": "Pergunta: O que é o método console.clear? Resposta: console.clear é um método que limpa o console de depuração."},
    {"id": 306, "text": "Pergunta: O que é o método console.table? Resposta: console.table é um método que exibe dados em uma tabela no console de depuração."},
    {"id": 307, "text": "Pergunta: O que é o método console.time? Resposta: console.time é um método que inicia um temporizador no console de depuração."},
    {"id": 308, "text": "Pergunta: O que é o método console.timeEnd? Resposta: console.timeEnd é um método que para um temporizador iniciado com console.time e exibe o tempo decorrido no console de depuração."},
    {"id": 309, "text": "Pergunta: O que é o objeto window? Resposta: O objeto window representa a janela do navegador e é o objeto global padrão em JavaScript."},
    {"id": 310, "text": "Pergunta: O que é a propriedade window.document? Resposta: window.document é uma propriedade que retorna o objeto Document para a janela."},
    {"id": 311, "text": "Pergunta: O que é a propriedade window.innerWidth? Resposta: window.innerWidth é uma propriedade que retorna a largura interna da janela em pixels."},
    {"id": 312, "text": "Pergunta: O que é a propriedade window.innerHeight? Resposta: window.innerHeight é uma propriedade que retorna a altura interna da janela em pixels."},
    {"id": 313, "text": "Pergunta: O que é a propriedade window.outerWidth? Resposta: window.outerWidth é uma propriedade que retorna a largura externa da janela em pixels."},
    {"id": 314, "text": "Pergunta: O que é a propriedade window.outerHeight? Resposta: window.outerHeight é uma propriedade que retorna a altura externa da janela em pixels."},
    {"id": 315, "text": "Pergunta: O que é a propriedade window.pageXOffset? Resposta: window.pageXOffset é uma propriedade que retorna o número de pixels que o documento foi rolado horizontalmente."},
    {"id": 316, "text": "Pergunta: O que é a propriedade window.pageYOffset? Resposta: window.pageYOffset é uma propriedade que retorna o número de pixels que o documento foi rolado verticalmente."},
    {"id": 317, "text": "Pergunta: O que é o método window.alert? Resposta: window.alert é um método que exibe uma caixa de alerta com uma mensagem e um botão OK."},
    {"id": 318, "text": "Pergunta: O que é o método window.confirm? Resposta: window.confirm é um método que exibe uma caixa de diálogo com uma mensagem e botões OK e Cancelar."},
    {"id": 319, "text": "Pergunta: O que é o método window.prompt? Resposta: window.prompt é um método que exibe uma caixa de diálogo com uma mensagem solicitando ao usuário que insira um valor."},
    {"id": 320, "text": "Pergunta: O que é o método window.open? Resposta: window.open é um método que abre uma nova janela do navegador com uma URL especificada."},
    {"id": 321, "text": "Pergunta: O que é o método window.close? Resposta: window.close é um método que fecha a janela atual do navegador."},
    {"id": 322, "text": "Pergunta: O que é o método window.setTimeout? Resposta: window.setTimeout é um método que define um temporizador que executa uma função ou código após um intervalo de tempo especificado."},
    {"id": 323, "text": "Pergunta: O que é o método window.clearTimeout? Resposta: window.clearTimeout é um método que cancela um temporizador definido com setTimeout."},
    {"id": 324, "text": "Pergunta: O que é o método window.setInterval? Resposta: window.setInterval é um método que define um temporizador que executa repetidamente uma função ou código em intervalos de tempo especificados."},
    {"id": 325, "text": "Pergunta: O que é o método window.clearInterval? Resposta: window.clearInterval é um método que cancela um temporizador definido com setInterval."},
    {"id": 326, "text": "Pergunta: O que é o método window.requestAnimationFrame? Resposta: window.requestAnimationFrame é um método que solicita que o navegador chame uma função específica para atualizar uma animação antes da próxima repaint."},
    {"id": 327, "text": "Pergunta: O que é o método window.cancelAnimationFrame? Resposta: window.cancelAnimationFrame é um método que cancela uma animação solicitada com requestAnimationFrame."},
    {"id": 328, "text": "Pergunta: O que é o método window.scrollTo? Resposta: window.scrollTo é um método que rola o documento para coordenadas específicas."},
    {"id": 329, "text": "Pergunta: O que é o método window.scrollBy? Resposta: window.scrollBy é um método que rola o documento por uma quantidade específica de pixels."},
    {"id": 330, "text": "Pergunta: O que é o método window.scroll? Resposta: window.scroll é um método que rola o documento para coordenadas específicas, com opções adicionais para comportamento suave."},
    {"id": 331, "text": "Pergunta: O que é o objeto document? Resposta: O objeto document representa o documento HTML carregado na janela do navegador."},
    {"id": 332, "text": "Pergunta: O que é a propriedade document.documentElement? Resposta: document.documentElement é uma propriedade que retorna o elemento raiz (o elemento <html>) do documento."},
    {"id": 333, "text": "Pergunta: O que é a propriedade document.body? Resposta: document.body é uma propriedade que retorna o elemento <body> do documento."},
    {"id": 334, "text": "Pergunta: O que é a propriedade document.head? Resposta: document.head é uma propriedade que retorna o elemento <head> do documento."},
    {"id": 335, "text": "Pergunta: O que é a propriedade document.title? Resposta: document.title é uma propriedade que define ou retorna o título do documento."},
    {"id": 336, "text": "Pergunta: O que é o método document.write? Resposta: document.write é um método que escreve texto HTML em um documento."},
    {"id": 337, "text": "Pergunta: O que é o método document.getElementById? Resposta: document.getElementById é um método que retorna o elemento que possui o ID especificado."},
    {"id": 338, "text": "Pergunta: O que é o método document.getElementsByClassName? Resposta: document.getElementsByClassName é um método que retorna uma coleção de todos os elementos que possuem a classe especificada."},
    {"id": 339, "text": "Pergunta: O que é o método document.getElementsByTagName? Resposta: document.getElementsByTagName é um método que retorna uma coleção de todos os elementos que possuem o nome da tag especificada."},
    {"id": 340, "text": "Pergunta: O que é o método document.querySelector? Resposta: document.querySelector é um método que retorna o primeiro elemento que corresponde a um seletor CSS especificado."},
    {"id": 341, "text": "Pergunta: O que é o método document.querySelectorAll? Resposta: document.querySelectorAll é um método que retorna uma NodeList de todos os elementos que correspondem a um seletor CSS especificado."},
    {"id": 342, "text": "Pergunta: O que é o método document.createElement? Resposta: document.createElement é um método que cria um novo elemento HTML."},
    {"id": 343, "text": "Pergunta: O que é o método document.createTextNode? Resposta: document.createTextNode é um método que cria um novo nó de texto."},
    {"id": 344, "text": "Pergunta: O que é o método document.appendChild? Resposta: document.appendChild é um método que adiciona um nó como o último filho de um nó pai."},
    {"id": 345, "text": "Pergunta: O que é o método document.removeChild? Resposta: document.removeChild é um método que remove um nó filho de um nó pai."},
    {"id": 346, "text": "Pergunta: O que é o método document.replaceChild? Resposta: document.replaceChild é um método que substitui um nó filho por um novo nó."},
    {"id": 347, "text": "Pergunta: O que é a propriedade document.cookie? Resposta: document.cookie é uma propriedade que retorna uma string contendo todos os cookies visíveis a partir do documento atual."},
    {"id": 348, "text": "Pergunta: O que é o método document.createEvent? Resposta: document.createEvent é um método que cria um novo objeto de evento."},
    {"id": 349, "text": "Pergunta: O que é o método document.createRange? Resposta: document.createRange é um método que cria um novo objeto de intervalo."},
    {"id": 350, "text": "Pergunta: O que é o objeto Node? Resposta: O objeto Node é a unidade básica do DOM e pode representar um elemento, texto, atributo, comentário, etc."},
    {"id": 351, "text": "Pergunta: O que é a propriedade node.nodeName? Resposta: node.nodeName é uma propriedade que retorna o nome do nó."},
    {"id": 352, "text": "Pergunta: O que é a propriedade node.nodeType? Resposta: node.nodeType é uma propriedade que retorna o tipo do nó."},
    {"id": 353, "text": "Pergunta: O que é a propriedade node.nodeValue? Resposta: node.nodeValue é uma propriedade que retorna ou define o valor do nó."},
    {"id": 354, "text": "Pergunta: O que é a propriedade node.parentNode? Resposta: node.parentNode é uma propriedade que retorna o nó pai de um nó."},
    {"id": 355, "text": "Pergunta: O que é a propriedade node.childNodes? Resposta: node.childNodes é uma propriedade que retorna uma NodeList de todos os nós filhos de um nó."},
    {"id": 356, "text": "Pergunta: O que é a propriedade node.firstChild? Resposta: node.firstChild é uma propriedade que retorna o primeiro nó filho de um nó."},
    {"id": 357, "text": "Pergunta: O que é a propriedade node.lastChild? Resposta: node.lastChild é uma propriedade que retorna o último nó filho de um nó."},
    {"id": 358, "text": "Pergunta: O que é a propriedade node.nextSibling? Resposta: node.nextSibling é uma propriedade que retorna o próximo nó irmão de um nó."},
    {"id": 359, "text": "Pergunta: O que é a propriedade node.previousSibling? Resposta: node.previousSibling é uma propriedade que retorna o nó irmão anterior de um nó."},
    {"id": 360, "text": "Pergunta: O que é a propriedade node.textContent? Resposta: node.textContent é uma propriedade que retorna ou define o conteúdo textual de um nó e seus descendentes."},
    {"id": 361, "text": "Pergunta: O que é o método node.appendChild? Resposta: node.appendChild é um método que adiciona um nó como o último filho de um nó."},
    {"id": 362, "text": "Pergunta: O que é o método node.insertBefore? Resposta: node.insertBefore é um método que insere um nó antes de um nó de referência como filho de um nó pai especificado."},
    {"id": 363, "text": "Pergunta: O que é o método node.removeChild? Resposta: node.removeChild é um método que remove um nó filho de um nó pai."},
    {"id": 364, "text": "Pergunta: O que é o método node.replaceChild? Resposta: node.replaceChild é um método que substitui um nó filho por um novo nó."},
    {"id": 365, "text": "Pergunta: O que é o método node.cloneNode? Resposta: node.cloneNode é um método que cria uma cópia de um nó."},
    {"id": 366, "text": "Pergunta: O que é o objeto Element? Resposta: O objeto Element representa um elemento em um documento HTML ou XML."},
    {"id": 367, "text": "Pergunta: O que é a propriedade element.tagName? Resposta: element.tagName é uma propriedade que retorna o nome da tag do elemento."},
    {"id": 368, "text": "Pergunta: O que é a propriedade element.id? Resposta: element.id é uma propriedade que retorna ou define o valor do atributo id do elemento."},
    {"id": 369, "text": "Pergunta: O que é a propriedade element.className? Resposta: element.className é uma propriedade que retorna ou define o valor do atributo class do elemento."},
    {"id": 370, "text": "Pergunta: O que é a propriedade element.classList? Resposta: element.classList é uma propriedade que retorna uma coleção de classes CSS do elemento."},
    {"id": 371, "text": "Pergunta: O que é o método element.getAttribute? Resposta: element.getAttribute é um método que retorna o valor de um atributo especificado do elemento."},
    {"id": 372, "text": "Pergunta: O que é o método element.setAttribute? Resposta: element.setAttribute é um método que define o valor de um atributo especificado do elemento."},
    {"id": 373, "text": "Pergunta: O que é o método element.removeAttribute? Resposta: element.removeAttribute é um método que remove um atributo especificado do elemento."},
    {"id": 374, "text": "Pergunta: O que é o método element.hasAttribute? Resposta: element.hasAttribute é um método que retorna um valor booleano indicando se o elemento possui um atributo especificado."},
    {"id": 375, "text": "Pergunta: O que é o método element.appendChild? Resposta: element.appendChild é um método que adiciona um nó como o último filho do elemento."},
    {"id": 376, "text": "Pergunta: O que é o método element.insertBefore? Resposta: element.insertBefore é um método que insere um nó antes de um nó de referência como filho do elemento especificado."},
    {"id": 377, "text": "Pergunta: O que é o método element.removeChild? Resposta: element.removeChild é um método que remove um nó filho do elemento."},
    {"id": 378, "text": "Pergunta: O que é o método element.replaceChild? Resposta: element.replaceChild é um método que substitui um nó filho por um novo nó no elemento."},
    {"id": 379, "text": "Pergunta: O que é o método element.cloneNode? Resposta: element.cloneNode é um método que cria uma cópia do elemento."},
    {"id": 380, "text": "Pergunta: O que é a propriedade element.innerHTML? Resposta: element.innerHTML é uma propriedade que retorna ou define o conteúdo HTML interno do elemento."},
    {"id": 381, "text": "Pergunta: O que é a propriedade element.outerHTML? Resposta: element.outerHTML é uma propriedade que retorna ou define o conteúdo HTML do elemento, incluindo o próprio elemento."},
    {"id": 382, "text": "Pergunta: O que é a propriedade element.innerText? Resposta: element.innerText é uma propriedade que retorna ou define o conteúdo de texto visível do elemento."},
    {"id": 383, "text": "Pergunta: O que é a propriedade element.textContent? Resposta: element.textContent é uma propriedade que retorna ou define o conteúdo textual do elemento e seus descendentes."},
    {"id": 384, "text": "Pergunta: O que é o método element.focus? Resposta: element.focus é um método que define o foco no elemento."},
    {"id": 385, "text": "Pergunta: O que é o método element.blur? Resposta: element.blur é um método que remove o foco do elemento."},
    {"id": 386, "text": "Pergunta: O que é o método element.click? Resposta: element.click é um método que simula um clique no elemento."},
    {"id": 387, "text": "Pergunta: O que é o método element.scrollIntoView? Resposta: element.scrollIntoView é um método que rola o documento para tornar o elemento visível na janela de visualização."},
    {"id": 388, "text": "Pergunta: O que é o objeto Event? Resposta: O objeto Event representa um evento que pode ocorrer em um documento HTML ou XML."},
    {"id": 389, "text": "Pergunta: O que é a propriedade event.type? Resposta: event.type é uma propriedade que retorna o tipo de evento."},
    {"id": 390, "text": "Pergunta: O que é a propriedade event.target? Resposta: event.target é uma propriedade que retorna o elemento que disparou o evento."},
    {"id": 391, "text": "Pergunta: O que é a propriedade event.currentTarget? Resposta: event.currentTarget é uma propriedade que retorna o elemento ao qual o manipulador de eventos atual está anexado."},
    {"id": 392, "text": "Pergunta: O que é a propriedade event.bubbles? Resposta: event.bubbles é uma propriedade que retorna um valor booleano indicando se o evento propaga para cima na hierarquia do DOM."},
    {"id": 393, "text": "Pergunta: O que é a propriedade event.cancelable? Resposta: event.cancelable é uma propriedade que retorna um valor booleano indicando se o evento pode ser cancelado."},
    {"id": 394, "text": "Pergunta: O que é o método event.preventDefault? Resposta: event.preventDefault é um método que cancela o comportamento padrão do evento."},
    {"id": 395, "text": "Pergunta: O que é o método event.stopPropagation? Resposta: event.stopPropagation é um método que impede a propagação do evento na hierarquia do DOM."},
    {"id": 396, "text": "Pergunta: O que é o método event.stopImmediatePropagation? Resposta: event.stopImmediatePropagation é um método que impede a propagação do evento e impede que outros ouvintes de eventos sejam chamados."},
    {"id": 397, "text": "Pergunta: O que é o objeto MouseEvent? Resposta: O objeto MouseEvent representa um evento de mouse que pode ocorrer em um documento HTML ou XML."},
    {"id": 398, "text": "Pergunta: O que é a propriedade mouseEvent.clientX? Resposta: mouseEvent.clientX é uma propriedade que retorna a coordenada X do evento de mouse em relação à área visível da janela do navegador."},
    {"id": 399, "text": "Pergunta: O que é a propriedade mouseEvent.clientY? Resposta: mouseEvent.clientY é uma propriedade que retorna a coordenada Y do evento de mouse em relação à área visível da janela do navegador."},
    {"id": 400, "text": "Pergunta: O que é a propriedade mouseEvent.screenX? Resposta: mouseEvent.screenX é uma propriedade que retorna a coordenada X do evento de mouse em relação à área da tela do dispositivo."},
    {"id": 401, "text": "Pergunta: O que é a propriedade mouseEvent.screenY? Resposta: mouseEvent.screenY é uma propriedade que retorna a coordenada Y do evento de mouse em relação à área da tela do dispositivo."},
    {"id": 402, "text": "Pergunta: O que é a propriedade mouseEvent.altKey? Resposta: mouseEvent.altKey é uma propriedade que retorna um valor booleano indicando se a tecla Alt estava pressionada quando o evento de mouse foi disparado."},
    {"id": 403, "text": "Pergunta: O que é a propriedade mouseEvent.ctrlKey? Resposta: mouseEvent.ctrlKey é uma propriedade que retorna um valor booleano indicando se a tecla Ctrl estava pressionada quando o evento de mouse foi disparado."},
    {"id": 404, "text": "Pergunta: O que é a propriedade mouseEvent.shiftKey? Resposta: mouseEvent.shiftKey é uma propriedade que retorna um valor booleano indicando se a tecla Shift estava pressionada quando o evento de mouse foi disparado."},
    {"id": 405, "text": "Pergunta: O que é JavaScript? Resposta: JavaScript é uma linguagem de programação amplamente utilizada para desenvolvimento web."},
    {"id": 406, "text": "Pergunta: Quais são os tipos de dados primitivos em JavaScript? Resposta: Os tipos de dados primitivos em JavaScript são: number, string, boolean, null, undefined, bigint e symbol."},
    {"id": 407, "text": "Pergunta: Como declarar uma variável em JavaScript? Resposta: Você pode declarar uma variável em JavaScript usando as palavras-chave 'var', 'let' ou 'const'."},
    {"id": 408, "text": "Pergunta: O que são funções de callback em JavaScript? Resposta: Funções de callback são funções que são passadas como argumentos para outras funções em JavaScript."},
    {"id": 409, "text": "Pergunta: Qual é a diferença entre 'let' e 'var' em JavaScript? Resposta: 'let' permite declarar variáveis limitadas ao escopo de bloco, enquanto 'var' tem escopo de função."},
    {"id": 410, "text": "Pergunta: O que é hoisting em JavaScript? Resposta: Hoisting é um comportamento em JavaScript onde declarações de variáveis e funções são movidas para o topo do seu escopo durante a fase de compilação."},
    {"id": 411, "text": "Pergunta: Como usar o operador 'this' em JavaScript? Resposta: O operador 'this' em JavaScript refere-se ao objeto ao qual a função pertence ou ao objeto que está sendo referenciado."},
    {"id": 412, "text": "Pergunta: O que é uma closure em JavaScript? Resposta: Uma closure é uma função que captura variáveis de seu escopo externo."},
    {"id": 413, "text": "Pergunta: Como verificar o tipo de uma variável em JavaScript? Resposta: Você pode verificar o tipo de uma variável usando o operador 'typeof'."},
    {"id": 414, "text": "Pergunta: O que é o 'strict mode' em JavaScript? Resposta: O 'strict mode' é uma forma restrita de sintaxe e operação que torna o código mais seguro e impõe boas práticas."},
    {"id": 415, "text": "Pergunta: Como trabalhar com arrays em JavaScript? Resposta: Em JavaScript, arrays são objetos que permitem armazenar múltiplos valores em uma única variável."},
    {"id": 416, "text": "Pergunta: O que são métodos de array em JavaScript? Resposta: Métodos de array em JavaScript são funções incorporadas que permitem manipular arrays de diversas maneiras."},
    {"id": 417, "text": "Pergunta: Como iterar um array em JavaScript? Resposta: Você pode iterar um array em JavaScript usando loops 'for', 'while', 'for...of' ou métodos como 'forEach'."},
    {"id": 418, "text": "Pergunta: O que é 'prototype' em JavaScript? Resposta: 'Prototype' em JavaScript é um mecanismo pelo qual os objetos herdam propriedades e métodos uns dos outros."},
    {"id": 419, "text": "Pergunta: Qual é a diferença entre '=='' e '===' em JavaScript? Resposta: '==' verifica a igualdade após a coerção de tipos, enquanto '===' verifica a igualdade sem coerção de tipos (estritamente)."},
    {"id": 420, "text": "Pergunta: O que é AJAX em JavaScript? Resposta: AJAX é uma técnica de desenvolvimento web que permite atualizar partes de uma página sem recarregar a página inteira."},
    {"id": 421, "text": "Pergunta: Como manipular o DOM em JavaScript? Resposta: Você pode manipular o DOM (Document Object Model) em JavaScript usando métodos como 'getElementById', 'querySelector', 'appendChild', entre outros."},
    {"id": 422, "text": "Pergunta: O que são Promises em JavaScript? Resposta: Promises em JavaScript são objetos que representam o resultado de uma operação assíncrona."},
    {"id": 423, "text": "Pergunta: Como usar async/await em JavaScript? Resposta: Async/await é uma maneira moderna de escrever código assíncrono em JavaScript, tornando-o mais legível e fácil de entender."},
    {"id": 424, "text": "Pergunta: O que são módulos em JavaScript? Resposta: Módulos em JavaScript são unidades independentes de código que podem ser reutilizadas em diferentes partes de um programa."},
    {"id": 425, "text": "Pergunta: Qual é a diferença entre 'map' e 'forEach' em JavaScript? Resposta: 'map' retorna um novo array com base em uma função de mapeamento aplicada a cada elemento, enquanto 'forEach' apenas itera sobre os elementos do array."},
    {"id": 426, "text": "Pergunta: O que são arrow functions em JavaScript? Resposta: Arrow functions são uma forma mais concisa de escrever funções em JavaScript, introduzidas no ES6."},
    {"id": 427, "text": "Pergunta: Como manipular eventos em JavaScript? Resposta: Você pode manipular eventos em JavaScript usando métodos como 'addEventListener' para responder a ações do usuário, como cliques ou teclas pressionadas."},
    {"id": 428, "text": "Pergunta: O que é o localStorage em JavaScript? Resposta: O localStorage é um recurso em JavaScript que permite armazenar dados de forma persistente no navegador do usuário."},
    {"id": 429, "text": "Pergunta: Como lidar com exceções (erros) em JavaScript? Resposta: Em JavaScript, você pode usar blocos try...catch para lidar com exceções e erros de maneira controlada."},
    {"id": 430, "text": "Pergunta: O que são métodos de string em JavaScript? Resposta: Métodos de string em JavaScript são funções incorporadas que permitem manipular strings de diversas maneiras."},
    {"id": 431, "text": "Pergunta: Como converter JSON para objeto em JavaScript? Resposta: Você pode usar JSON.parse() para converter uma string JSON em um objeto JavaScript."},
    {"id": 432, "text": "Pergunta: O que é o evento 'DOMContentLoaded' em JavaScript? Resposta: O evento 'DOMContentLoaded' é disparado quando o HTML do documento é completamente carregado e analisado, sem aguardar pelo CSS, imagens ou outros recursos externos."},
    {"id": 433, "text": "Pergunta: O que são getters e setters em JavaScript? Resposta: Getters e setters são métodos que permitem obter e definir valores de propriedades de objetos em JavaScript."},
    {"id": 434, "text": "Pergunta: Como criar um objeto em JavaScript? Resposta: Você pode criar um objeto em JavaScript usando a sintaxe de objeto literal '{}' ou usando a função construtora 'new Object()'."},
    {"id": 435, "text": "Pergunta: O que é o método 'bind' em JavaScript? Resposta: O método 'bind' em JavaScript cria uma nova função que, quando chamada, tem seu contexto ('this') definido com um valor específico."},
    {"id": 436, "text": "Pergunta: Como trabalhar com datas em JavaScript? Resposta: Em JavaScript, você pode criar objetos de data usando 'new Date()' e manipulá-los usando métodos como 'getDate()', 'getMonth()', 'getFullYear()', entre outros."},
    {"id": 437, "text": "Pergunta: O que é o operador spread (...) em JavaScript? Resposta: O operador spread (...) em JavaScript permite que um objeto iterável, como um array ou string, seja expandido em lugares onde zero ou mais argumentos (para chamadas de função) ou elementos (para arrays literais) são esperados."},
    {"id": 438, "text": "Pergunta: Qual é a diferença entre 'find' e 'filter' em JavaScript? Resposta: 'find' retorna o primeiro elemento que satisfaz uma condição fornecida, enquanto 'filter' retorna um array de todos os elementos que satisfazem uma condição fornecida."},
    {"id": 439, "text": "Pergunta: O que são métodos de objeto em JavaScript? Resposta: Métodos de objeto em JavaScript são funções que são propriedades de um objeto e permitem que você execute ações específicas nesse objeto."},
    {"id": 440, "text": "Pergunta: O que é o operador ternário em JavaScript? Resposta: O operador ternário é uma forma concisa de escrever uma instrução if...else em JavaScript."},
    {"id": 441, "text": "Pergunta: Como usar o método 'reduce' em JavaScript? Resposta: O método 'reduce' em JavaScript é usado para reduzir os elementos de um array a um único valor, aplicando uma função callback para cada elemento."},
    {"id": 442, "text": "Pergunta: O que são classes em JavaScript? Resposta: Classes em JavaScript são uma forma de definir objetos com construtores e métodos associados, introduzidas no ES6."},
    {"id": 443, "text": "Pergunta: Como usar herança em classes JavaScript? Resposta: Herança em classes JavaScript pode ser implementada usando a palavra-chave 'extends' para criar uma classe filha que herda métodos e propriedades da classe pai."},
    {"id": 444, "text": "Pergunta: O que é destructuring em JavaScript? Resposta: Destructuring em JavaScript é uma maneira de extrair valores de arrays ou objetos em variáveis individuais."},
    {"id": 445, "text": "Pergunta: Como usar o operador de espalhamento (spread operator) em arrays em JavaScript? Resposta: O operador de espalhamento (...) em JavaScript permite copiar os elementos de um array em outro array literal ou passá-los como argumentos para uma função."},
    {"id": 446, "text": "Pergunta: O que são 'map', 'reduce' e 'filter' em JavaScript? Resposta: 'map', 'reduce' e 'filter' são métodos de array em JavaScript que permitem transformar, reduzir e filtrar elementos de um array, respectivamente."},
    {"id": 447, "text": "Pergunta: Como criar um módulo em JavaScript usando export e import? Resposta: Você pode exportar funções, variáveis ou classes de um arquivo usando 'export' e importá-las em outro arquivo usando 'import', conforme definido no padrão ECMAScript (ES6)."},
    {"id": 448, "text": "Pergunta: O que é o objeto global 'window' em JavaScript? Resposta: O objeto global 'window' representa a janela do navegador e contém métodos e propriedades relacionadas ao ambiente de execução do JavaScript no navegador."},
    {"id": 449, "text": "Pergunta: O que é o objeto 'arguments' em JavaScript? Resposta: O objeto 'arguments' em JavaScript é um objeto semelhante a um array que contém os argumentos passados para uma função."},
    {"id": 450, "text": "Pergunta: O que são 'cookies' em JavaScript? Resposta: 'Cookies' em JavaScript são pequenos arquivos de texto armazenados no navegador do usuário que são usados para armazenar informações persistentes entre sessões."},
    {"id": 451, "text": "Pergunta: Como realizar validação de formulários em JavaScript? Resposta: Você pode realizar validação de formulários em JavaScript usando eventos como 'submit' e validando os campos do formulário usando lógica condicional e expressões regulares."},
    {"id": 452, "text": "Pergunta: O que é o método 'fetch' em JavaScript? Resposta: O método 'fetch' em JavaScript é usado para fazer requisições HTTP assíncronas para recuperar recursos de uma URL."},
    {"id": 453, "text": "Pergunta: Como manipular datas e horas em JavaScript? Resposta: Você pode manipular datas e horas em JavaScript usando objetos de data, métodos como 'getDate()', 'getMonth()', 'getHours()', e bibliotecas como o Moment.js."},
    {"id": 454, "text": "Pergunta: O que são IIFE (Immediately Invoked Function Expressions) em JavaScript? Resposta: IIFE em JavaScript são funções que são executadas imediatamente após serem criadas, envolvidas por parênteses para evitar poluição do escopo global."},
    {"id": 455, "text": "Pergunta: Como usar o método 'findIndex' em JavaScript? Resposta: O método 'findIndex' em JavaScript retorna o índice do primeiro elemento de um array que satisfaz uma condição fornecida."},
    {"id": 456, "text": "Pergunta: O que é o método 'some' em JavaScript? Resposta: O método 'some' em JavaScript verifica se pelo menos um elemento em um array satisfaz uma condição fornecida, retornando true ou false."},
    {"id": 457, "text": "Pergunta: O que é 'memoization' em JavaScript? Resposta: 'Memoization' em JavaScript é uma técnica de otimização que armazena o resultado de chamadas de função caras e reutiliza o valor armazenado quando a mesma entrada ocorre novamente."},
    {"id": 458, "text": "Pergunta: Como usar o método 'forEach' em JavaScript? Resposta: O método 'forEach' em JavaScript itera sobre os elementos de um array e executa uma função de callback para cada elemento."},
    {"id": 459, "text": "Pergunta: O que é o método 'slice' em JavaScript? Resposta: O método 'slice' em JavaScript retorna uma cópia superficial de uma parte de um array em um novo array objeto, sem modificar o array original."},
    {"id": 460, "text": "Pergunta: Como concatenar strings em JavaScript? Resposta: Você pode concatenar strings em JavaScript usando o operador de adição (+) ou o método 'concat()'."},
    {"id": 461, "text": "Pergunta: O que são 'event listeners' em JavaScript? Resposta: 'Event listeners' em JavaScript são funções que tratam eventos específicos que ocorrem em elementos HTML, como cliques de mouse, pressionamentos de tecla, entre outros."},
    {"id": 462, "text": "Pergunta: Como usar 'async' e 'await' com fetch em JavaScript? Resposta: Você pode usar 'async' e 'await' com fetch em JavaScript para fazer requisições HTTP de forma assíncrona e lidar com as respostas de maneira mais síncrona."},
    {"id": 463, "text": "Pergunta: O que é o método 'sort' em JavaScript? Resposta: O método 'sort' em JavaScript ordena os elementos de um array localmente e retorna o array ordenado."},
    {"id": 464, "text": "Pergunta: Como gerar números aleatórios em JavaScript? Resposta: Você pode gerar números aleatórios em JavaScript usando a função 'Math.random()'."},
    {"id": 465, "text": "Pergunta: O que é o operador ternário condicional em JavaScript? Resposta: O operador ternário condicional (?:) é uma expressão condicional que retorna um valor com base em uma condição."},
    {"id": 466, "text": "Pergunta: Como usar o método 'replace' em JavaScript? Resposta: O método 'replace' em JavaScript substitui partes de uma string com outra string, retornando uma nova string."},
    {"id": 467, "text": "Pergunta: O que é o método 'split' em JavaScript? Resposta: O método 'split' em JavaScript divide uma string em um array de substrings com base em um separador especificado."},
    {"id": 468, "text": "Pergunta: O que é o método 'join' em JavaScript? Resposta: O método 'join' em JavaScript une todos os elementos de um array em uma string e retorna a string resultante."},
    {"id": 469, "text": "Pergunta: Como verificar se um objeto tem uma determinada propriedade em JavaScript? Resposta: Você pode verificar se um objeto tem uma determinada propriedade usando o operador 'in' ou o método 'hasOwnProperty()'."},
    {"id": 470, "text": "Pergunta: O que são expressões regulares (regex) em JavaScript? Resposta: Expressões regulares em JavaScript são objetos que descrevem um padrão de caracteres para busca em strings."},
    {"id": 471, "text": "Pergunta: Como usar 'setTimeout' em JavaScript? Resposta: 'setTimeout' é uma função em JavaScript que executa uma função ou um trecho de código depois de um determinado período de tempo especificado."},
    {"id": 472, "text": "Pergunta: O que é o método 'every' em JavaScript? Resposta: O método 'every' em JavaScript verifica se todos os elementos de um array satisfazem uma condição fornecida, retornando true ou false."},
    {"id": 473, "text": "Pergunta: Como remover elementos duplicados de um array em JavaScript? Resposta: Você pode remover elementos duplicados de um array em JavaScript usando o método 'filter' em conjunto com um conjunto (Set) para armazenar valores únicos."},
    {"id": 474, "text": "Pergunta: O que são 'weakmaps' em JavaScript? Resposta: 'WeakMaps' em JavaScript são coleções de pares chave/valor onde as chaves são fracamente mantidas, o que significa que elas não impedem a remoção de objetos da memória pelo coletor de lixo."},
    {"id": 475, "text": "Pergunta: O que são 'weaksets' em JavaScript? Resposta: 'WeakSets' em JavaScript são coleções de objetos onde os objetos são referenciados de forma fraca, o que significa que eles podem ser removidos da memória pelo coletor de lixo se não houver outras referências para eles."},
    {"id": 476, "text": "Pergunta: Como funciona a herança prototípica em JavaScript? Resposta: A herança prototípica em JavaScript permite que um objeto herde propriedades e métodos de outro objeto. Cada objeto tem uma referência para seu protótipo pai."},
    {"id": 477, "text": "Pergunta: O que é o método 'filter' em JavaScript? Resposta: O método 'filter' em JavaScript cria um novo array com todos os elementos que passam em um teste (função callback) fornecido."},
    {"id": 478, "text": "Pergunta: Como verificar se um valor é um número em JavaScript? Resposta: Você pode verificar se um valor é um número em JavaScript usando a função 'isNaN()' ou o operador 'typeof'."},
    {"id": 479, "text": "Pergunta: O que é o método 'find' em JavaScript? Resposta: O método 'find' em JavaScript retorna o primeiro elemento de um array que satisfaz uma função de teste fornecida."},
    {"id": 480, "text": "Pergunta: Como verificar se uma variável é indefinida (undefined) em JavaScript? Resposta: Você pode verificar se uma variável é indefinida usando o operador 'typeof' ou comparando com 'undefined'."},
    {"id": 481, "text": "Pergunta: O que é o método 'concat' em JavaScript? Resposta: O método 'concat' em JavaScript é usado para mesclar dois ou mais arrays, retornando um novo array com os elementos combinados."},
    {"id": 482, "text": "Pergunta: Como usar o método 'reverse' em JavaScript? Resposta: O método 'reverse' em JavaScript inverte a ordem dos elementos de um array, modificando o array original."},
    {"id": 483, "text": "Pergunta: O que são 'setters' em JavaScript? Resposta: 'Setters' em JavaScript são métodos especiais que permitem definir o valor de uma propriedade em um objeto."},
    {"id": 484, "text": "Pergunta: O que é a pilha de chamadas (call stack) em JavaScript? Resposta: A pilha de chamadas em JavaScript é uma estrutura de dados que registra onde estamos na execução do código. É usada para rastrear as funções que estão sendo chamadas."},
    {"id": 485, "text": "Pergunta: Como fazer uma requisição POST com fetch em JavaScript? Resposta: Você pode fazer uma requisição POST com fetch em JavaScript passando um objeto de opções que inclui o método 'POST', o cabeçalho 'Content-Type' e o corpo da requisição."},
    {"id": 486, "text": "Pergunta: O que são 'modules' (módulos) em JavaScript? Resposta: 'Modules' em JavaScript são arquivos que exportam um ou mais valores (funções, objetos, primitivos) usando a palavra-chave 'export', permitindo a importação desses valores em outros arquivos usando 'import'."},
    {"id": 487, "text": "Pergunta: Como usar 'local storage' em JavaScript? Resposta: 'Local storage' em JavaScript permite armazenar dados de forma persistente no navegador do usuário usando métodos como 'localStorage.setItem()' para definir valores e 'localStorage.getItem()' para recuperá-los."},
    {"id": 488, "text": "Pergunta: O que é o método 'push' em JavaScript? Resposta: O método 'push' em JavaScript adiciona um ou mais elementos ao final de um array e retorna o novo comprimento do array."},
    {"id": 489, "text": "Pergunta: Como usar 'event delegation' em JavaScript? Resposta: 'Event delegation' em JavaScript é uma técnica onde você adiciona um único manipulador de eventos a um ancestral comum de vários elementos, aproveitando o conceito de propagação de eventos (event bubbling)."},
    {"id": 490, "text": "Pergunta: O que é o método 'shift' em JavaScript? Resposta: O método 'shift' em JavaScript remove o primeiro elemento de um array e o retorna, atualizando o array original."},
    {"id": 491, "text": "Pergunta: Como copiar um objeto em JavaScript? Resposta: Para copiar um objeto em JavaScript, você pode usar métodos como 'Object.assign()' ou o operador de espalhamento (...) para criar uma cópia superficial do objeto."},
    {"id": 492, "text": "Pergunta: O que são 'arrays' (matrizes) em JavaScript? Resposta: 'Arrays' em JavaScript são objetos de alto nível que armazenam uma lista de elementos de um determinado tipo, acessíveis por um índice."},
    {"id": 493, "text": "Pergunta: O que é o método 'includes' em JavaScript? Resposta: O método 'includes' em JavaScript verifica se um array contém um determinado elemento, retornando true ou false conforme apropriado."},
    {"id": 494, "text": "Pergunta: Como converter um número para uma string em JavaScript? Resposta: Você pode converter um número para uma string em JavaScript usando o método 'toString()' ou concatenando com uma string vazia ('')."},
    {"id": 495, "text": "Pergunta: O que é o método 'substring' em JavaScript? Resposta: O método 'substring' em JavaScript retorna a parte da string entre os índices inicial e final, ou até o final da string, sem modificar a string original."},
    {"id": 496, "text": "Pergunta: Como usar 'requestAnimationFrame' em JavaScript? Resposta: 'requestAnimationFrame' é um método em JavaScript que programaticamente agenda a execução de uma função para o próximo ciclo de renderização do navegador, fornecendo um melhor controle sobre animações e melhorando o desempenho."},
    {"id": 497, "text": "Pergunta: O que é o objeto 'navigator' em JavaScript? Resposta: O objeto 'navigator' em JavaScript fornece informações sobre o navegador do usuário, como nome, versão e características do sistema."},
    {"id": 498, "text": "Pergunta: O que é o método 'pop' em JavaScript? Resposta: O método 'pop' em JavaScript remove o último elemento de um array e retorna o elemento removido, modificando o array original."},
    {"id": 499, "text": "Pergunta: Como usar 'setInterval' em JavaScript? Resposta: 'setInterval' é uma função em JavaScript que executa uma função ou trecho de código repetidamente, com um intervalo fixo de tempo especificado, até que seja cancelada com 'clearInterval'."},
    {"id": 500, "text": "Pergunta: O que é o método 'unshift' em JavaScript? Resposta: O método 'unshift' em JavaScript adiciona um ou mais elementos no início de um array e retorna o novo comprimento do array."}
]